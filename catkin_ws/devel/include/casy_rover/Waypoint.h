/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/odroid/catkin_ws/src/casy_rover/msg/Waypoint.msg
 *
 */


#ifndef CASY_ROVER_MESSAGE_WAYPOINT_H
#define CASY_ROVER_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace casy_rover
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : latitude(0)
    , longitude(0)
    , altitude(0)
    , pos_acc(0)
    , speed_to(0)
    , hold_time(0)
    , yaw_from(0)
    , pan_angle(0)
    , tilt_angle(0)
    , waypoint_type(0)  {
    }
  Waypoint_(const ContainerAllocator& _alloc)
    : latitude(0)
    , longitude(0)
    , altitude(0)
    , pos_acc(0)
    , speed_to(0)
    , hold_time(0)
    , yaw_from(0)
    , pan_angle(0)
    , tilt_angle(0)
    , waypoint_type(0)  {
    }



   typedef int32_t _latitude_type;
  _latitude_type latitude;

   typedef int32_t _longitude_type;
  _longitude_type longitude;

   typedef int32_t _altitude_type;
  _altitude_type altitude;

   typedef uint16_t _pos_acc_type;
  _pos_acc_type pos_acc;

   typedef uint8_t _speed_to_type;
  _speed_to_type speed_to;

   typedef uint16_t _hold_time_type;
  _hold_time_type hold_time;

   typedef int32_t _yaw_from_type;
  _yaw_from_type yaw_from;

   typedef int32_t _pan_angle_type;
  _pan_angle_type pan_angle;

   typedef int32_t _tilt_angle_type;
  _tilt_angle_type tilt_angle;

   typedef uint8_t _waypoint_type_type;
  _waypoint_type_type waypoint_type;


    enum { TYPE_NAV = 1u };
     enum { TYPE_CONDITION_YAW = 2u };
     enum { TYPE_CONDITION_CHANGE_ALT = 3u };
     enum { TYPE_TAKEOFF = 4u };
 

  typedef boost::shared_ptr< ::casy_rover::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::casy_rover::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::casy_rover::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::casy_rover::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::casy_rover::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::casy_rover::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::casy_rover::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace casy_rover

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'casy_rover': ['/home/odroid/catkin_ws/src/casy_rover/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::casy_rover::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::casy_rover::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::casy_rover::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::casy_rover::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::casy_rover::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::casy_rover::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::casy_rover::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6dac49f8cf4308a151d9b97deaca8a40";
  }

  static const char* value(const ::casy_rover::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6dac49f8cf4308a1ULL;
  static const uint64_t static_value2 = 0x51d9b97deaca8a40ULL;
};

template<class ContainerAllocator>
struct DataType< ::casy_rover::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "casy_rover/Waypoint";
  }

  static const char* value(const ::casy_rover::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::casy_rover::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# latitude and longitude given in decimal degrees (* 10^7)\n\
int32 latitude\n\
int32 longitude\n\
\n\
# height in mm\n\
int32 altitude\n\
\n\
# posAcc given in mm\n\
uint16 pos_acc\n\
\n\
# max speed to travel to waypoint in % of 100\n\
uint8 speed_to\n\
\n\
# time to stay at waypoint in ms\n\
uint16 hold_time\n\
\n\
# yawFrom angle given in degrees (* 1000)\n\
int32 yaw_from\n\
\n\
# camera pan and tilt angles during waypoint travel given in degrees (* 1000)\n\
int32 pan_angle\n\
int32 tilt_angle\n\
\n\
# Type of Waypoint\n\
uint8 waypoint_type\n\
\n\
uint8 TYPE_NAV = 1\n\
uint8 TYPE_CONDITION_YAW = 2\n\
uint8 TYPE_CONDITION_CHANGE_ALT = 3\n\
uint8 TYPE_TAKEOFF = 4\n\
";
  }

  static const char* value(const ::casy_rover::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::casy_rover::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.pos_acc);
      stream.next(m.speed_to);
      stream.next(m.hold_time);
      stream.next(m.yaw_from);
      stream.next(m.pan_angle);
      stream.next(m.tilt_angle);
      stream.next(m.waypoint_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::casy_rover::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::casy_rover::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.altitude);
    s << indent << "pos_acc: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pos_acc);
    s << indent << "speed_to: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_to);
    s << indent << "hold_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.hold_time);
    s << indent << "yaw_from: ";
    Printer<int32_t>::stream(s, indent + "  ", v.yaw_from);
    s << indent << "pan_angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pan_angle);
    s << indent << "tilt_angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tilt_angle);
    s << indent << "waypoint_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waypoint_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CASY_ROVER_MESSAGE_WAYPOINT_H
