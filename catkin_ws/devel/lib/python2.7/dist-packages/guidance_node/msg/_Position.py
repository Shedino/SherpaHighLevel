"""autogenerated by genpy from guidance_node/Position.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Position(genpy.Message):
  _md5sum = "c1801fd11e9afa833f83a0ba29bb36f9"
  _type = "guidance_node/Position"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# expressed as * 1E7
int32 Latitude
# expressed as * 1E7
int32 Longitude
# expressed as * 1000 (millimeters)
int32 AltitudeRelative
# (-pi...pi)
float32 Yawangle
# milliseconds since system boot)
uint32 Timestamp
# safety
int8 Safety

"""
  __slots__ = ['Latitude','Longitude','AltitudeRelative','Yawangle','Timestamp','Safety']
  _slot_types = ['int32','int32','int32','float32','uint32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Latitude,Longitude,AltitudeRelative,Yawangle,Timestamp,Safety

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Position, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Latitude is None:
        self.Latitude = 0
      if self.Longitude is None:
        self.Longitude = 0
      if self.AltitudeRelative is None:
        self.AltitudeRelative = 0
      if self.Yawangle is None:
        self.Yawangle = 0.
      if self.Timestamp is None:
        self.Timestamp = 0
      if self.Safety is None:
        self.Safety = 0
    else:
      self.Latitude = 0
      self.Longitude = 0
      self.AltitudeRelative = 0
      self.Yawangle = 0.
      self.Timestamp = 0
      self.Safety = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3ifIb.pack(_x.Latitude, _x.Longitude, _x.AltitudeRelative, _x.Yawangle, _x.Timestamp, _x.Safety))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.Latitude, _x.Longitude, _x.AltitudeRelative, _x.Yawangle, _x.Timestamp, _x.Safety,) = _struct_3ifIb.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3ifIb.pack(_x.Latitude, _x.Longitude, _x.AltitudeRelative, _x.Yawangle, _x.Timestamp, _x.Safety))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.Latitude, _x.Longitude, _x.AltitudeRelative, _x.Yawangle, _x.Timestamp, _x.Safety,) = _struct_3ifIb.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3ifIb = struct.Struct("<3ifIb")
