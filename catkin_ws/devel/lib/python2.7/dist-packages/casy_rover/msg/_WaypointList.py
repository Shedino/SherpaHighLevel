"""autogenerated by genpy from casy_rover/WaypointList.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import casy_rover.msg

class WaypointList(genpy.Message):
  _md5sum = "55f6e3d4649782ff855bc4699f0b61df"
  _type = "casy_rover/WaypointList"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Waypoint[] waypoints

================================================================================
MSG: casy_rover/Waypoint
# latitude and longitude given in decimal degrees (* 10^7)
int32 latitude
int32 longitude

# height in mm
int32 altitude

# posAcc given in mm
uint16 pos_acc

# max speed to travel to waypoint in % of 100
uint8 speed_to

# time to stay at waypoint in ms
uint16 hold_time

# yawFrom angle given in degrees (* 1000)
int32 yaw_from

# camera pan and tilt angles during waypoint travel given in degrees (* 1000)
int32 pan_angle
int32 tilt_angle

# Type of Waypoint
uint8 waypoint_type

uint8 TYPE_NAV = 1
uint8 TYPE_CONDITION_YAW = 2
uint8 TYPE_CONDITION_CHANGE_ALT = 3
uint8 TYPE_TAKEOFF = 4

"""
  __slots__ = ['waypoints']
  _slot_types = ['casy_rover/Waypoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       waypoints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WaypointList, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.waypoints is None:
        self.waypoints = []
    else:
      self.waypoints = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_struct_3iHBH3iB.pack(_x.latitude, _x.longitude, _x.altitude, _x.pos_acc, _x.speed_to, _x.hold_time, _x.yaw_from, _x.pan_angle, _x.tilt_angle, _x.waypoint_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.waypoints is None:
        self.waypoints = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = casy_rover.msg.Waypoint()
        _x = val1
        start = end
        end += 30
        (_x.latitude, _x.longitude, _x.altitude, _x.pos_acc, _x.speed_to, _x.hold_time, _x.yaw_from, _x.pan_angle, _x.tilt_angle, _x.waypoint_type,) = _struct_3iHBH3iB.unpack(str[start:end])
        self.waypoints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_struct_3iHBH3iB.pack(_x.latitude, _x.longitude, _x.altitude, _x.pos_acc, _x.speed_to, _x.hold_time, _x.yaw_from, _x.pan_angle, _x.tilt_angle, _x.waypoint_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.waypoints is None:
        self.waypoints = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = casy_rover.msg.Waypoint()
        _x = val1
        start = end
        end += 30
        (_x.latitude, _x.longitude, _x.altitude, _x.pos_acc, _x.speed_to, _x.hold_time, _x.yaw_from, _x.pan_angle, _x.tilt_angle, _x.waypoint_type,) = _struct_3iHBH3iB.unpack(str[start:end])
        self.waypoints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3iHBH3iB = struct.Struct("<3iHBH3iB")
