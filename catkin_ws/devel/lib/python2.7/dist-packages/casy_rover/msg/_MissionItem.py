"""autogenerated by genpy from casy_rover/MissionItem.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class MissionItem(genpy.Message):
  _md5sum = "a4eec5db18601d2affa66a99457a442d"
  _type = "casy_rover/MissionItem"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Based on MAVLink 1.0 Messages: MISSION_ITEM
# See common.xml in MAVLink Messages

# Information regarding current waypoint target

Header header

# Mission Item Number
uint16 mission_num

# Boolean to show if mission item is current
uint8 isCurrent
uint8 isAutoContinue

# Position Accuracy in meters
float32 posAcc

# Hold Time in ms
float32 holdTime

# Radius in meters for Loiter Circle.  Positive = clockwise, negative = counter
float32 loiterRadius

# Desired Yaw Angle in degrees
float32 yawFrom

# Latitude, Longitude, and Altitude
float32 x_lat
float32 y_long
float32 z_alt

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','mission_num','isCurrent','isAutoContinue','posAcc','holdTime','loiterRadius','yawFrom','x_lat','y_long','z_alt']
  _slot_types = ['std_msgs/Header','uint16','uint8','uint8','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,mission_num,isCurrent,isAutoContinue,posAcc,holdTime,loiterRadius,yawFrom,x_lat,y_long,z_alt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MissionItem, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mission_num is None:
        self.mission_num = 0
      if self.isCurrent is None:
        self.isCurrent = 0
      if self.isAutoContinue is None:
        self.isAutoContinue = 0
      if self.posAcc is None:
        self.posAcc = 0.
      if self.holdTime is None:
        self.holdTime = 0.
      if self.loiterRadius is None:
        self.loiterRadius = 0.
      if self.yawFrom is None:
        self.yawFrom = 0.
      if self.x_lat is None:
        self.x_lat = 0.
      if self.y_long is None:
        self.y_long = 0.
      if self.z_alt is None:
        self.z_alt = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.mission_num = 0
      self.isCurrent = 0
      self.isAutoContinue = 0
      self.posAcc = 0.
      self.holdTime = 0.
      self.loiterRadius = 0.
      self.yawFrom = 0.
      self.x_lat = 0.
      self.y_long = 0.
      self.z_alt = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2B7f.pack(_x.mission_num, _x.isCurrent, _x.isAutoContinue, _x.posAcc, _x.holdTime, _x.loiterRadius, _x.yawFrom, _x.x_lat, _x.y_long, _x.z_alt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.mission_num, _x.isCurrent, _x.isAutoContinue, _x.posAcc, _x.holdTime, _x.loiterRadius, _x.yawFrom, _x.x_lat, _x.y_long, _x.z_alt,) = _struct_H2B7f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H2B7f.pack(_x.mission_num, _x.isCurrent, _x.isAutoContinue, _x.posAcc, _x.holdTime, _x.loiterRadius, _x.yawFrom, _x.x_lat, _x.y_long, _x.z_alt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.mission_num, _x.isCurrent, _x.isAutoContinue, _x.posAcc, _x.holdTime, _x.loiterRadius, _x.yawFrom, _x.x_lat, _x.y_long, _x.z_alt,) = _struct_H2B7f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_H2B7f = struct.Struct("<H2B7f")
