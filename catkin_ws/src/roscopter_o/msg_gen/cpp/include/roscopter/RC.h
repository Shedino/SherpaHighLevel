/* Auto-generated by genmsg_cpp for file /home/odroid/catkin_ws/src/roscopter/msg/RC.msg */
#ifndef ROSCOPTER_MESSAGE_RC_H
#define ROSCOPTER_MESSAGE_RC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace roscopter
{
template <class ContainerAllocator>
struct RC_ {
  typedef RC_<ContainerAllocator> Type;

  RC_()
  : channel()
  {
    channel.assign(0);
  }

  RC_(const ContainerAllocator& _alloc)
  : channel()
  {
    channel.assign(0);
  }

  typedef boost::array<int32_t, 8>  _channel_type;
  boost::array<int32_t, 8>  channel;


  typedef boost::shared_ptr< ::roscopter::RC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscopter::RC_<ContainerAllocator>  const> ConstPtr;
}; // struct RC
typedef  ::roscopter::RC_<std::allocator<void> > RC;

typedef boost::shared_ptr< ::roscopter::RC> RCPtr;
typedef boost::shared_ptr< ::roscopter::RC const> RCConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roscopter::RC_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roscopter::RC_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roscopter

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roscopter::RC_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roscopter::RC_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roscopter::RC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0f8285b6fdeccee6bef1d0353358d5cf";
  }

  static const char* value(const  ::roscopter::RC_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0f8285b6fdeccee6ULL;
  static const uint64_t static_value2 = 0xbef1d0353358d5cfULL;
};

template<class ContainerAllocator>
struct DataType< ::roscopter::RC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roscopter/RC";
  }

  static const char* value(const  ::roscopter::RC_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roscopter::RC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# rc channels\n\
\n\
int32[8] channel\n\
";
  }

  static const char* value(const  ::roscopter::RC_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::roscopter::RC_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roscopter::RC_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.channel);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RC_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscopter::RC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roscopter::RC_<ContainerAllocator> & v) 
  {
    s << indent << "channel[]" << std::endl;
    for (size_t i = 0; i < v.channel.size(); ++i)
    {
      s << indent << "  channel[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.channel[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROSCOPTER_MESSAGE_RC_H

