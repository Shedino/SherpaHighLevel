/* Auto-generated by genmsg_cpp for file /home/odroid/catkin_ws/src/roscopter/msg/State.msg */
#ifndef ROSCOPTER_MESSAGE_STATE_H
#define ROSCOPTER_MESSAGE_STATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace roscopter
{
template <class ContainerAllocator>
struct State_ {
  typedef State_<ContainerAllocator> Type;

  State_()
  : armed(false)
  , guided(false)
  , mode()
  {
  }

  State_(const ContainerAllocator& _alloc)
  : armed(false)
  , guided(false)
  , mode(_alloc)
  {
  }

  typedef uint8_t _armed_type;
  uint8_t armed;

  typedef uint8_t _guided_type;
  uint8_t guided;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  mode;


  typedef boost::shared_ptr< ::roscopter::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscopter::State_<ContainerAllocator>  const> ConstPtr;
}; // struct State
typedef  ::roscopter::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::roscopter::State> StatePtr;
typedef boost::shared_ptr< ::roscopter::State const> StateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roscopter::State_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roscopter::State_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roscopter

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roscopter::State_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roscopter::State_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roscopter::State_<ContainerAllocator> > {
  static const char* value() 
  {
    return "78271f1d5e63aa48bd71dc911f0524f1";
  }

  static const char* value(const  ::roscopter::State_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x78271f1d5e63aa48ULL;
  static const uint64_t static_value2 = 0xbd71dc911f0524f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscopter::State_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roscopter/State";
  }

  static const char* value(const  ::roscopter::State_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roscopter::State_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool     armed\n\
bool     guided		#true if MAV is in AUTO/RTL/LOITER/GUIDED/CIRCLE mode\n\
string   mode   	#control more\n\
\n\
";
  }

  static const char* value(const  ::roscopter::State_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roscopter::State_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.armed);
    stream.next(m.guided);
    stream.next(m.mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct State_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscopter::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roscopter::State_<ContainerAllocator> & v) 
  {
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
    s << indent << "guided: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.guided);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROSCOPTER_MESSAGE_STATE_H

