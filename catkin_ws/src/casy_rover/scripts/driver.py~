#!/usr/bin/env python
import rospy
from std_msgs.msg import String, Header, Bool
from std_srvs.srv import *
from sensor_msgs.msg import NavSatFix, NavSatStatus, Imu
import casy_rover.msg
import casy_rover.srv
import sys,struct,time,os
import math
import xmlrpclib

##******************************************************************************
# Parse any arguments that follow the node command
#*******************************************************************************
from optparse import OptionParser
parser = OptionParser("casyrover.py [options]")


parser.add_option("--vehicle-name", dest="vehicle_name", default="",
                  help="name of vehicle")
                  
parser.add_option("--type", dest="type", 
                  help="ArduRover or ArduCopter", default="ArduRover")
parser.add_option("--baudrate", dest="baudrate", type='int',
                  help="master port baud rate", default=57600)
parser.add_option("--device", dest="device", default="/dev/ttyACM0",
                  help="serial device")
parser.add_option("--rate", dest="rate", default=1000, type='int',
                  help="parsing rate for roscopter")
parser.add_option("--mavlink-rate", dest="mavlink_rate", default=10,
                  type='int', help="requested stream rate")
parser.add_option("--source-system", dest='SOURCE_SYSTEM', type='int',
                  default=255, help='MAVLink source system for this GCS')
parser.add_option("--enable-rc-control",dest="enable_rc_control", default=True,
                  help="enable listening to control messages")
                  
# State and command Timeouts
parser.add_option("--mode-timeout", dest="mode_timeout", default=1000,
                  type='int', help="Mode timeout in milli-seconds")

# Watchdog parameters                  
parser.add_option("--enable-watchdog",dest="enable_watchdog", default=False,
                  help="enable watchdog")
parser.add_option("--max-watchdog-time", dest="max_watchdog_time", default=3,
                  type='int', help="Max time in seconds before watchdog takes over")
parser.add_option("--watchdog-rate", dest="watchdog_rate", default=1,
                  type='int', help="Rate at which watchdog should check")

# ROS Failsafe
parser.add_option("--enable-ros-failsafe", dest="enable_ros_failsafe", default=False,
                  help="Enable Failsafe function to land vehicle if ROS shuts down")

# Autonomous Enable switch Parameters
parser.add_option("--enable-autonomous-control", dest="enable_autonomous_safety_switch", default=True,
                  help="Enable Listening for Autonomous Enable Switch on Specified Channel")                  
parser.add_option("--autonomous-channel-id", dest="autonomous_channel_id", default=6,
                  type='int', help="Channel to use for checking Autonomous Enable [5 - 8]: default channel 6")


(opts, args) = parser.parse_args()

# Boolean variable to enable commands based on autonomous switch
autonomous_enable = False


##******************************************************************************
# Import and connect to the apm through mavlink
#*******************************************************************************
sys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(__file__)), '../mavlink/pymavlink'))
import mavutil

# create a mavlink serial instance
master = mavutil.mavlink_connection(opts.device, baud=opts.baudrate)

if opts.device is None:
    print("You must specify a serial device")
    sys.exit(1)



##******************************************************************************
 # Name:    send_rc_cb
 # Purpose: Callback function for "send_rc" message. Takes incoming 8 integers
 #              and passes to the various PWM RC Channels on the APM. May be
 #              used for direct control of the vehicle. Sending RC values on a 
 #              channel overrides that channel on a physical Transmitter. To
 #              Ignore a channel, a value of -1 or "65535" should be written. To
 #              Return a channel back to a physical transmitter, write a 0. 
 # Params:  data: Desired PWM values for 8 RC Channels
#*******************************************************************************
def send_rc_cb(data):
    # Look at autonomous safety switch, if the switch is not enabled, return 
    # False.  If not looking at safety switch or it is enabled, then complete
    # the desired behavior.
    if (opts.enable_autonomous_safety_switch):
        if (not autonomous_enable):
            return

    master.mav.rc_channels_override_send(master.target_system, master.target_component,
                data.channel[0],data.channel[1],data.channel[2],data.channel[3],
                data.channel[4],data.channel[5],data.channel[6],data.channel[7])
    rospy.loginfo ("sending rc: %s"%data)


##******************************************************************************
 # Name:    command_cb
 # Purpose: Callback function for "command" Service.  Specific commands are used
 #              to control functions such as Launch, Land, Arm, Disarm, etc.
 #              All commands may be found within the "APMCommand" Service file.
 #              New commands should be entered there to keep uniform constants
 #              throughout calling functions
 # Params:  data: Requested command variable
#*******************************************************************************
def command_cb(req):

    if req.command == casy_rover.srv._APMCommand.APMCommandRequest.CMD_SET_MANUAL:
        rospy.loginfo ("SET MODE TO MANUAL")
        
        # Check if Mode has already been set
        if (state_msg.mode == "MANUAL"):
            rospy.loginfo("Mode already set to MANUAL")
            return True
            
        master.set_mode_manual()

        # Loop until mode is set or timeout
        start_time = rospy.Time.from_sec(time.time()).to_nsec()

        while (not state_msg.mode == "MANUAL"):
            if (not (start_time + opts.mode_timeout*1000000) > rospy.Time.from_sec(time.time()).to_nsec()):
                rospy.loginfo("Timed out while setting MANUAL")
                return False

            rospy.sleep(0.01)

        return True

    elif req.command == casy_rover.srv._APMCommand.APMCommandRequest.RETURN_RC_CONTROL:
        rospy.loginfo ("RETURN RC CONTROL")
        master.mav.rc_channels_override_send(master.target_system, master.target_component,0,0,0,0,0,0,0,0)
        return True

    return False

watchdog_time = 0
    
# Failsafe land function for ardurover
def failsafe_manual(event):
    rospy.loginfo("Setting to Manual due to failsafe")
        
    master.set_mode_manual()

    # Loop until mode is set or timeout
    start_time = rospy.Time.from_sec(time.time()).to_nsec()

    while (not state_msg.mode == "MANUAL"):
        if (not (start_time + opts.mode_timeout*1000000) > rospy.Time.from_sec(time.time()).to_nsec()):
            rospy.loginfo("Timed out while setting MANUAL")
            return False

        rospy.sleep(0.01)
        
    rospy.loginfo("Completed Setting to Manual due to failsafe")

def watchdog_timer_cb(event):
    global watchdog_time
    
    if ((event.current_real.to_sec() - watchdog_time) > opts.max_watchdog_time):
        print("Watchdog Failed at " + str(event.current_real))
        failsafe_manual(event)
    
def watchdog_cb(msg):
    global watchdog_time
    watchdog_time = rospy.get_time()
    rospy.loginfo('Watchdog polled at ' + str(watchdog_time))

##******************************************************************************
# Publisher and Subscribers to be used for ROS communications of sensor or 
#     Mavlink responses
#*******************************************************************************
# Sensor messages
pub_gps = rospy.Publisher('gps', NavSatFix)
pub_rc = rospy.Publisher('rc', casy_rover.msg.RC)
pub_state = rospy.Publisher('state', casy_rover.msg.State)
pub_vfr_hud = rospy.Publisher('vfr_hud', casy_rover.msg.VFR_HUD)
pub_raw_imu =  rospy.Publisher('raw_imu', casy_rover.msg.Mavlink_RAW_IMU)
pub_status = rospy.Publisher('status', casy_rover.msg.Status)
pub_filtered_pos = rospy.Publisher('filtered_pos', casy_rover.msg.FilteredPosition)

##******************************************************************************
# Services for APM Commands
#*******************************************************************************
# Allow for commands such as Arm, Disarm, Launch, Land, etc.
rospy.Service("command", casy_rover.srv.APMCommand, command_cb)

##******************************************************************************
# Start Heartbeat subscriber and timer
#*******************************************************************************
if opts.enable_watchdog:
    rospy.Subscriber("watchdog", Bool, watchdog_cb)

##******************************************************************************
# Optional Controls
#*******************************************************************************
# Allow For RC Control
if opts.enable_rc_control:
    rospy.Subscriber("send_rc", casy_rover.msg.RC , send_rc_cb)

##******************************************************************************
# Global Message containers
#*******************************************************************************
gps_msg = NavSatFix()
state_msg = casy_rover.msg.State()
filtered_pos_msg = casy_rover.msg.FilteredPosition()


##******************************************************************************
 # Name:    ros_failsafe
 # Purpose: Function to check and confirm that ROS is still running. If ROS Core
 #              has shutdown, the land command should be sent.
#*******************************************************************************
caller_id = '/casy_rover'
m = xmlrpclib.ServerProxy(os.environ['ROS_MASTER_URI'])
failsafe_triggered = False
def ros_failsafe_check():
    global failsafe_triggered
    
    if (not failsafe_triggered):
        try:
            #pass
            m.getSystemState(caller_id)
#            m.getUri(caller_id)
        except:
            print("ROSCore Failed, Stop Vehicle")
            rospy.Timer(rospy.Duration(1), failsafe_manual, True)
            failsafe_triggered = True

##******************************************************************************
 # Name:    mainloop
 # Purpose: Main loop to initialize ROS node and parse data read from the
 #              Mavlink master.
 # Globals: Publishers and Subscribers
 #          mission_request_buffer: buffer to hold list of requests for desired
 #              mission_item to be sent
#*******************************************************************************
def mainloop():
    global gps_msg, autonomous_enable
    rospy.init_node('casy_rover')
    
    if opts.enable_watchdog:
        rospy.Timer(rospy.Duration(1/opts.watchdog_rate), watchdog_timer_cb)

    # SEND IF YOU DESIRE A LIST OF ALL PARAMS (TODO: Publish params to a topic)
    #master.mav.param_request_list_send(master.target_system, master.target_component)

    # Permette di settare un parametro come in mission planner    
    #master.param_set_send('FS_ACTION', 0, 2)

    # Stampa una lista di tutti i parametri disponibili
    #master.param_fetch_all()
    
    r = rospy.Rate(opts.rate)
    while not rospy.is_shutdown():    
        r.sleep()
        msg = master.recv_match(blocking=False)
        if not msg:
            continue
        
        # Parse incoming message
        if msg.get_type() == "BAD_DATA":
            if mavutil.all_printable(msg.data):
                sys.stdout.write(msg.data)
                sys.stdout.flush()
        else: 
            msg_type = msg.get_type()
            
            if msg_type == "RC_CHANNELS_RAW" :
            
                # If using Autonomous Control safety switch, use specified channel
                # to enable or disable autonomous control.  Autonomous control
                # allows mode, rc, and waypoint controls.
                if (opts.enable_autonomous_safety_switch):
                    # Only allows autonomous enable via channels 5 - 8
                    if (opts.autonomous_channel_id == 5):
                        if (msg.chan5_raw >= 1500):
                            autonomous_enable = True
                        elif (msg.chan5_raw < 1500):
                            autonomous_enable = False
                            # Give control back to controller
                            master.mav.rc_channels_override_send(master.target_systiem,
                                 master.target_component, 0, 0, 0, 0, 0, 0, 0, 0)
                    elif (opts.autonomous_channel_id == 6):
                        if (msg.chan6_raw >= 1500):
                            autonomous_enable = True
                        elif (msg.chan6_raw < 1500):
                            autonomous_enable = False
                            # Give control back to controller
                            master.mav.rc_channels_override_send(master.target_system,
                                 master.target_component, 0, 0, 0, 0, 0, 0, 0, 0)
                    elif (opts.autonomous_channel_id == 7):
                        if (msg.chan7_raw >= 1500):
                            autonomous_enable = True
                        elif (msg.chan7_raw < 1500):
                            autonomous_enable = False
                            # Give control back to controller
                            master.mav.rc_channels_override_send(master.target_system,
                                 master.target_component, 0, 0, 0, 0, 0, 0, 0, 0)
                    elif (opts.autonomous_channel_id == 8):
                        if (msg.chan8_raw >= 1500):
                            autonomous_enable = True
                        elif (msg.chan8_raw < 1500):
                            autonomous_enable = False
                            # Give control back to controller
                            master.mav.rc_channels_override_send(master.target_system,
                                 master.target_component, 0, 0, 0, 0, 0, 0, 0, 0)
            
                pub_rc.publish([msg.chan1_raw, msg.chan2_raw, msg.chan3_raw,
                                msg.chan4_raw, msg.chan5_raw, msg.chan6_raw,
                                msg.chan7_raw, msg.chan8_raw]) 
            elif msg_type == "HEARTBEAT":
                pub_state.publish(msg.base_mode & mavutil.mavlink.MAV_MODE_FLAG_SAFETY_ARMED, 
                                  msg.base_mode & mavutil.mavlink.MAV_MODE_FLAG_GUIDED_ENABLED, 
                                  mavutil.mode_string_v10(msg))

                state_msg.armed = msg.base_mode & mavutil.mavlink.MAV_MODE_FLAG_SAFETY_ARMED
                state_msg.mode = mavutil.mode_string_v10(msg)
            elif msg_type == "VFR_HUD":
                pub_vfr_hud.publish(msg.airspeed, msg.groundspeed, msg.heading, msg.throttle, msg.alt, msg.climb)

            elif msg_type == "GPS_RAW_INT":
                fix = NavSatStatus.STATUS_NO_FIX
                if msg.fix_type >=3:
                    fix=NavSatStatus.STATUS_FIX

                header = Header()
                header.frame_id = 'base_link'# '/gps'
                header.stamp = rospy.Time.now()

                #rospy.loginfo("Hdop is %d", msg.eph)
                #rospy.loginfo("Vdop is %d", msg.epv)

                sigma = math.sqrt((3.04 * msg.eph**2)**2 + 3.57**2)
                position_covariance = [0] * 9
                position_covariance[0] = sigma #9999
                position_covariance[4] = sigma #9999
                position_covariance[8] = sigma #9999

                pub_gps.publish(NavSatFix(header = header,
                                          latitude = msg.lat/1e07,
                                          longitude = msg.lon/1e07,
                                          altitude = msg.alt/1e03,
                                          position_covariance=position_covariance,
                                          position_covariance_type=NavSatFix.COVARIANCE_TYPE_APPROXIMATED,
                                          status = NavSatStatus(status=fix, service = NavSatStatus.SERVICE_GPS) 
                                          ))

                gps_msg.latitude = msg.lat
                gps_msg.longitude = msg.lon

            elif msg_type == "LOCAL_POSITION_NED" :
                rospy.loginfo("Local Pos: (%f %f %f) , (%f %f %f)" %(msg.x, msg.y, msg.z, msg.vx, msg.vy, msg.vz))

            elif msg_type == "RAW_IMU" :
                pub_raw_imu.publish (Header(), msg.time_usec, 
                                     msg.xacc, msg.yacc, msg.zacc, 
                                     msg.xgyro, msg.ygyro, msg.zgyro,
                                     msg.xmag, msg.ymag, msg.zmag)

            elif msg_type == "SYS_STATUS":
                status_msg = casy_rover.msg.Status()
                status_msg.header.stamp = rospy.Time.now()
                status_msg.battery_voltage = msg.voltage_battery
                status_msg.battery_current = msg.current_battery
                status_msg.battery_remaining = msg.battery_remaining
                status_msg.sensors_enabled = msg.onboard_control_sensors_enabled
                pub_status.publish(status_msg)
                
            elif msg_type == "GLOBAL_POSITION_INT":
                header = Header()
                header.stamp = rospy.Time.now()
                filtered_pos_msg.header = header
                filtered_pos_msg.latitude = msg.lat
                filtered_pos_msg.longitude = msg.lon
                filtered_pos_msg.altitude = msg.alt
                filtered_pos_msg.relative_altitude = msg.relative_alt
                filtered_pos_msg.ground_x_speed = msg.vx
                filtered_pos_msg.ground_y_speed = msg.vy
                filtered_pos_msg.ground_z_speed = msg.vz
                filtered_pos_msg.heading = msg.hdg
                pub_filtered_pos.publish(filtered_pos_msg)                                         
        
            elif msg_type == "COMMAND_ACK":
                rospy.loginfo ("COMMAND_ACK: Command Message ACK with result - " + str(msg.result))
              
            elif msg_type == "STATUSTEXT":
                rospy.loginfo ("STATUSTEXT: Status severity is %d. Text Message is %s" %(msg.severity, msg.text)) 

            elif msg_type == "PARAM_VALUE":
                rospy.loginfo ("PARAM_VALUE: ID = %s, Value = %d, Type = %d, Count = %d, Index = %d"
                    %(msg.param_id, msg.param_value, msg.param_type, msg.param_count, msg.param_index))

            #else:
            #    # Message not being processed received
            #    rospy.loginfo( msg_type)




##******************************************************************************
 # Name:    wait_heartbeat
 # Purpose: Function to wait for the heartbeat from the APM
 # Params:  m: mavlink master
#*******************************************************************************
def wait_heartbeat(m):
    '''wait for a heartbeat so we know the target system IDs'''
    print("Waiting for APM heartbeat")
    m.wait_heartbeat()
    print("Heartbeat from APM (system %u component %u)" % (m.target_system, m.target_component))

##******************************************************************************
# MAIN START USING THESE FUNCTIONS
#*******************************************************************************
# wait for the heartbeat msg to find the system ID
wait_heartbeat(master)

# waiting for 10 seconds for the system to be ready
print("Sleeping for 10 seconds to allow system, to be ready")
rospy.sleep(10)
print("Sending all stream request for mavlink_rate %u" % opts.mavlink_rate)

master.mav.request_data_stream_send(master.target_system, master.target_component,
                                    mavutil.mavlink.MAV_DATA_STREAM_ALL, opts.mavlink_rate, 1)
if __name__ == '__main__':
    try:
#        if (opts.enable_ros_failsafe):
#            rospy.Timer(rospy.Duration(1), ros_failsafe_check)        
        mainloop()
    except rospy.ROSInterruptException: pass
    
